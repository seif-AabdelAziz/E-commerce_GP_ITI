// <auto-generated />
using System;
using E_Commerce.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.DAL.Migrations
{
    [DbContext(typeof(E_CommerceContext))]
    [Migration("20230626110948_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("E_Commerce.DAL.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = new Guid("08c139d4-c4c6-47ed-a26a-a6c1444d5c45"),
                            CustomerId = new Guid("c7d3e80a-7a4a-4c54-91a6-89c0df051c94")
                        },
                        new
                        {
                            CartId = new Guid("8521a8b2-06c6-4084-93b7-8d06ddf1c701"),
                            CustomerId = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992bb7")
                        },
                        new
                        {
                            CartId = new Guid("e0e01361-538e-4d9f-862b-575f9d0d978e"),
                            CustomerId = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992bb8")
                        },
                        new
                        {
                            CartId = new Guid("9fd9925c-9d3e-4843-ac0b-d7b768e99a8e"),
                            CustomerId = new Guid("e23edc32-bd6a-4b6b-a28e-ccf60b5c32dc")
                        },
                        new
                        {
                            CartId = new Guid("eb702766-dd54-45f4-ab27-785f74b94fdd"),
                            CustomerId = new Guid("f0e7f09e-c7ad-4cb0-8f19-6540b4c7c49f")
                        },
                        new
                        {
                            CartId = new Guid("d493bf27-b432-4e8d-b4b5-93de4b486864"),
                            CustomerId = new Guid("22ac8dc9-4385-48ae-90a3-7d8c898c6d5d")
                        },
                        new
                        {
                            CartId = new Guid("2577a20e-adb9-49e3-993b-603bec966a18"),
                            CustomerId = new Guid("b6a76b15-33e5-4d26-98b9-c948c7823b84")
                        },
                        new
                        {
                            CartId = new Guid("400b06a5-93c2-40b9-8f9d-41e421c91151"),
                            CustomerId = new Guid("0e67a2e5-df53-4a92-9854-8e1ad46a4e61")
                        },
                        new
                        {
                            CartId = new Guid("ce036e14-a1ae-464d-b187-f09b9f224432"),
                            CustomerId = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992b58")
                        },
                        new
                        {
                            CartId = new Guid("acd8bec4-9435-420d-b56d-6a3556919ea1"),
                            CustomerId = new Guid("724587e6-9314-4fe6-9c3e-6fd612f50234")
                        },
                        new
                        {
                            CartId = new Guid("d6f10021-39f0-47f7-b4f6-89fa266481f8"),
                            CustomerId = new Guid("234cdf89-12a3-45b6-789c-0123456789de")
                        },
                        new
                        {
                            CartId = new Guid("a4354553-817c-419e-818c-7e37cc85ee52"),
                            CustomerId = new Guid("6789abcd-ef01-2345-6789-abcd01234567")
                        },
                        new
                        {
                            CartId = new Guid("7e510317-3cf8-465e-aeaa-a873c89e5d73"),
                            CustomerId = new Guid("bcdef012-3456-789a-bcde-f01234567890")
                        },
                        new
                        {
                            CartId = new Guid("9e4b7852-f663-4779-9d96-bf68957d1532"),
                            CustomerId = new Guid("2345cdef-0123-4567-89ab-cdef01234567")
                        },
                        new
                        {
                            CartId = new Guid("5f36fa5c-41a2-4dab-a7f3-11b493635932"),
                            CustomerId = new Guid("8901def0-1234-5678-9abc-def012345678")
                        },
                        new
                        {
                            CartId = new Guid("a0aa7b28-db53-4eec-858d-ba5aaa598f0c"),
                            CustomerId = new Guid("23456789-01ab-cdef-0123-456789abcdef")
                        },
                        new
                        {
                            CartId = new Guid("3c8da74f-f37c-4a51-a6aa-76bbcd3d3dc4"),
                            CustomerId = new Guid("def01234-5678-9abc-def0-123456789abc")
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.CartProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("E_Commerce.DAL.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583"),
                            Description = "Men's Clothing",
                            Image = "men.jpg",
                            Name = "Men"
                        },
                        new
                        {
                            Id = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d"),
                            Description = "Women's Clothing",
                            Image = "Women.jpg",
                            Name = "Women"
                        },
                        new
                        {
                            Id = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f"),
                            Description = "Kids's Clothing",
                            Image = "Kids.jpg",
                            Name = "Kids"
                        },
                        new
                        {
                            Id = new Guid("f032f788-2340-431f-9f8f-eeb176a35177"),
                            Description = "Mens shirts's Clothing",
                            Image = "men shirts.jpg",
                            Name = "Shirts",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("a6c4de53-33c5-48e1-9f21-5649726d3a3d"),
                            Description = "Women shirts's Clothing",
                            Image = "Women shirts.jpg",
                            Name = "Shirts",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("8a6d4a19-47cc-4a4e-822b-cac1de2efc8d"),
                            Description = "Kids shirts's Clothing",
                            Image = "Kids shirts.jpg",
                            Name = "Shirts",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("9a938bc1-0717-4b8d-8f8b-3a2f55de49db"),
                            Description = "Men Pants's Clothing",
                            Image = "men Pants.jpg",
                            Name = "Pants",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("d9f02e92-d14c-4b6d-86ad-6e4e6c48020a"),
                            Description = "Women Pants's Clothing",
                            Image = "Women Pants.jpg",
                            Name = "Pants",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("1d53debe-03e6-487f-9b34-6b26c68fc1e5"),
                            Description = "Kids Pants's Clothing",
                            Image = "Kids Pants.jpg",
                            Name = "Pants",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("6b3c4ef5-01ad-49c7-a8ff-36ae55d0ce8d"),
                            Description = "Men Shoes's Clothing",
                            Image = "men Shoes.jpg",
                            Name = "Shoes",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("35b303b9-25a0-4379-89b3-64e4ae51291f"),
                            Description = "Women Shoes's Clothing",
                            Image = "Women Shoes.jpg",
                            Name = "Shoes",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("ca09f6a1-5b87-4b56-9ee3-c6fb6ad070c2"),
                            Description = "Kids Shoes's Clothing",
                            Image = "Kids Shoes.jpg",
                            Name = "Shoes",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("6f6c6c4c-9e6e-4e0c-97cc-8b52c055918b"),
                            Description = "Men Jackets's Clothing",
                            Image = "men Jackets.jpg",
                            Name = "Jackets",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("47a38a48-8747-4461-ba32-7e573be663ee"),
                            Description = "Women Jackets's Clothing",
                            Image = "Women Jackets.jpg",
                            Name = "Jackets",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("b19a53a3-04e7-4804-84bc-84da64d738a6"),
                            Description = "Kids Jackets's Clothing",
                            Image = "Kids Jackets.jpg",
                            Name = "Jackets",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("a6d7e8b5-2f4d-4f51-b24b-4fcb52e36f5f"),
                            Description = "Men Hoodies's Clothing",
                            Image = "men Hoodies.jpg",
                            Name = "Hoodies",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("e18e42b7-799e-4b3b-a084-c55d4bb5da3f"),
                            Description = "Women Hoodies's Clothing",
                            Image = "Women Hoodies.jpg",
                            Name = "Hoodies",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("c2ae51c9-913a-4e7d-a7b5-ef1efc8f9d3e"),
                            Description = "Kids Hoodies's Clothing",
                            Image = "Kids Hoodies.jpg",
                            Name = "Hoodies",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.CustomerReview", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersReviews");
                });

            modelBuilder.Entity("E_Commerce.DAL.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderData")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7d3e80a-7a4a-4c54-91a6-89c0df051c94"),
                            ArrivalDate = new DateTime(2029, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Iraq",
                            CustomerId = "07d96ed8-155d-49c7-a77a-615f109d77c3",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2029, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "567 Oak St"
                        },
                        new
                        {
                            Id = new Guid("6789abcd-ef01-2345-6789-abcd01234567"),
                            ArrivalDate = new DateTime(2029, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Seattle",
                            Country = "Libya",
                            CustomerId = "c7d3e80a-7a4a-4c54-91a6-89c0df051c94",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2029, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = new Guid("8901def0-1234-5678-9abc-def012345678"),
                            ArrivalDate = new DateTime(2029, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Country = "Afghanistan",
                            CustomerId = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb7",
                            Discount = 0.0,
                            OrderData = new DateTime(2029, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Unpaid",
                            Street = "123 Pine St"
                        },
                        new
                        {
                            Id = new Guid("b6a76b15-33e5-4d26-98b9-c948c7823b84"),
                            ArrivalDate = new DateTime(2029, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Los Angeles",
                            Country = "Andorra",
                            CustomerId = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb8",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2029, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = new Guid("07d96ed8-155d-49c7-a77a-615f109d77c3"),
                            ArrivalDate = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Zimbabwe",
                            CustomerId = "e23edc32-bd6a-4b6b-a28e-ccf60b5c32dc",
                            Discount = 1.0,
                            OrderData = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = new Guid("07d96ed8-155d-49c7-a77a-615f109d75c3"),
                            ArrivalDate = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Zimbabwe",
                            CustomerId = "b6a76b15-33e5-4d26-98b9-c948c7823b84",
                            Discount = 1.0,
                            OrderData = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = new Guid("0e67a2e5-df53-4a92-9854-8e1ad46a4e61"),
                            ArrivalDate = new DateTime(2027, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "New York",
                            Country = "Belgium",
                            CustomerId = "0e67a2e5-df53-4a92-9854-8e1ad46a4e61",
                            Discount = 0.0,
                            OrderData = new DateTime(2027, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Unpaid",
                            Street = "123 Elm St"
                        },
                        new
                        {
                            Id = new Guid("22ac8dc9-4385-48ae-90a3-7d8c898c6d5d"),
                            ArrivalDate = new DateTime(2027, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Los Angeles",
                            Country = "Belize",
                            CustomerId = "74f5b2b3-3d10-4a85-93b5-8c6d0c992b58",
                            Discount = 0.5,
                            OrderData = new DateTime(2027, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "456 Main St"
                        },
                        new
                        {
                            Id = new Guid("f0e7f09e-c7ad-4cb0-8f19-6540b4c7c49f"),
                            ArrivalDate = new DateTime(2029, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Canada",
                            CustomerId = "724587e6-9314-4fe6-9c3e-6fd612f50234",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2028, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Unpaid",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = new Guid("23456789-01ab-cdef-0123-456789abcdef"),
                            ArrivalDate = new DateTime(2027, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Country = "Oman",
                            CustomerId = "234cdf89-12a3-45b6-789c-0123456789de",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2027, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "321 Maple Ave"
                        },
                        new
                        {
                            Id = new Guid("2345cdef-0123-4567-89ab-cdef11234567"),
                            ArrivalDate = new DateTime(2027, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Seattle",
                            Country = "Taiwan",
                            CustomerId = "6789abcd-ef01-2345-6789-abcd01234567",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2027, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "567 Pine St"
                        },
                        new
                        {
                            Id = new Guid("def01234-5678-9abc-def0-113456789abc"),
                            ArrivalDate = new DateTime(2028, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Miami",
                            Country = "Fiji",
                            CustomerId = "bcdef012-3456-789a-bcde-f01234567890",
                            Discount = 0.29999999999999999,
                            OrderData = new DateTime(2028, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "901 Cherry Ln"
                        },
                        new
                        {
                            Id = new Guid("e23edc32-bd6a-4b6b-a28e-ccf90b5c32dc"),
                            ArrivalDate = new DateTime(2028, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Boston",
                            Country = "Denmark",
                            CustomerId = "2345cdef-0123-4567-89ab-cdef01234567",
                            Discount = 0.14999999999999999,
                            OrderData = new DateTime(2028, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "246 Elm St"
                        },
                        new
                        {
                            Id = new Guid("f0e7f09e-c7ad-4cb0-8f19-6540b5c7c49f"),
                            ArrivalDate = new DateTime(2029, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Canada",
                            CustomerId = "8901def0-1234-5678-9abc-def012345678",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2029, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Unpaid",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = new Guid("724587e6-9314-4fe6-9c3e-7fd612f50234"),
                            ArrivalDate = new DateTime(2029, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Dallas",
                            Country = "Samoa",
                            CustomerId = "b6a76b15-33e5-4d26-98b9-c948c7823b84",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2029, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "987 Cedar St"
                        },
                        new
                        {
                            Id = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992b58"),
                            ArrivalDate = new DateTime(2029, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Diego",
                            Country = "Samoa",
                            CustomerId = "bcdef012-3456-789a-bcde-f01234567890",
                            Discount = 0.0,
                            OrderData = new DateTime(2029, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Unpaid",
                            Street = "456 Oak St"
                        },
                        new
                        {
                            Id = new Guid("724587e6-9314-4fe6-9c3e-7fd612f50233"),
                            ArrivalDate = new DateTime(2029, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Seattle",
                            Country = "Samoa",
                            CustomerId = "c7d3e80a-7a4a-4c54-91a6-89c0df051c94",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2029, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "789 Pine St"
                        },
                        new
                        {
                            Id = new Guid("724587e6-9314-4fe6-9c3e-7fd612f50232"),
                            ArrivalDate = new DateTime(2029, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Country = "Senegal",
                            CustomerId = "def01234-5678-9abc-def0-123456789abc",
                            Discount = 0.29999999999999999,
                            OrderData = new DateTime(2029, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "123 Maple Ave"
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.OrderProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4e20f23-ec2e-4259-b550-91bde9c2b42d"),
                            Description = "Comfortable cotton t-shirt for men",
                            Discount = 0m,
                            Name = "Men's T-Shirt",
                            Price = 15.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("c2d79b90-fb63-49f5-89d9-cfc033df6fe6"),
                            Description = "Elegant dress for women",
                            Discount = 0.1m,
                            Name = "Women's Dress",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("21998760-fe38-4b3f-81f8-931ba21c8da4"),
                            Description = "Colorful shoes for kids",
                            Discount = 0.15m,
                            Name = "Kids' Shoes",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("f627d1d9-64b1-4822-94c6-7e03e2fe44e3"),
                            Description = "Warm hoodie for men",
                            Discount = 0.05m,
                            Name = "Men's Hoodie",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("972fd402-8b31-429a-b780-2f605c4c4c96"),
                            Description = "Comfortable cotton t-shirt for men",
                            Discount = 0m,
                            Name = "Men's T-Shirt",
                            Price = 15.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("6a852b98-204a-4137-8455-11c713533750"),
                            Description = "Elegant dress for women",
                            Discount = 0.1m,
                            Name = "Women's Dress",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("427e0019-8009-4578-b34c-7ea52fd311ba"),
                            Description = "Colorful shoes for kids",
                            Discount = 0.15m,
                            Name = "Kids' Shoes",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("1fead0fa-6811-4596-a93e-69d931219c77"),
                            Description = "Classic denim jeans for men",
                            Discount = 0.05m,
                            Name = "Men's Jeans",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("8b08778f-9d8c-4228-9f94-408ec300fb79"),
                            Description = "Stylish blouse for women",
                            Discount = 0m,
                            Name = "Women's Blouse",
                            Price = 24.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("a0808f81-a925-4a05-b5c3-fdf8d0a85366"),
                            Description = "Spacious backpack for kids",
                            Discount = 0m,
                            Name = "Kids' Backpack",
                            Price = 19.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("18834b0d-3e2b-4378-b1df-25341ce732f4"),
                            Description = "Casual shorts for men",
                            Discount = 0.1m,
                            Name = "Men's Shorts",
                            Price = 17.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("36f892f3-4487-4b75-a88f-0c90e0ee3f45"),
                            Description = "Comfortable sandals for women",
                            Discount = 0.2m,
                            Name = "Women's Sandals",
                            Price = 34.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("ab1e26e4-508f-45a2-8497-0ef448f1ef2a"),
                            Description = "Adorable t-shirt for kids",
                            Discount = 0m,
                            Name = "Kids' T-Shirt",
                            Price = 12.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("847ff397-c982-4fee-97a4-c375025b9486"),
                            Description = "Stylish sneakers for men",
                            Discount = 0.15m,
                            Name = "Men's Sneakers",
                            Price = 59.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("4e16340c-5ab1-4dc9-8bcc-ff9641e6b537"),
                            Description = "Fashionable skirt for women",
                            Discount = 0m,
                            Name = "Women's Skirt",
                            Price = 27.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("d0cc568d-f2f5-4db4-b431-9a60a51c43e3"),
                            Description = "Warm jacket for kids",
                            Discount = 0.1m,
                            Name = "Kids' Jacket",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("f09a3bb6-2af5-4421-b707-1d833b18471d"),
                            Description = "Classic polo shirt for men",
                            Discount = 0m,
                            Name = "Men's Polo Shirt",
                            Price = 22.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("e315499c-8bbb-4bf9-a92f-46bdbb6167a5"),
                            Description = "Stylish denim jeans for women",
                            Discount = 0.05m,
                            Name = "Women's Jeans",
                            Price = 44.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("6630af75-cefa-4d71-92ef-9eb910f63321"),
                            Description = "Cute dress for kids",
                            Discount = 0m,
                            Name = "Kids' Dress",
                            Price = 32.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("5d8a015b-01e3-46f9-8497-d99a02d2ab07"),
                            Description = "Warm jacket for men",
                            Discount = 0.2m,
                            Name = "Men's Jacket",
                            Price = 59.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("aa8dbe6b-6aeb-4b7b-ab93-4c6d53242e6b"),
                            Description = "Sporty sneakers for women",
                            Discount = 0m,
                            Name = "Women's Sneakers",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("95c44ed4-7f69-4358-a0b9-5097df631a3d"),
                            Description = "Casual trousers for kids",
                            Discount = 0.1m,
                            Name = "Kids' Trousers",
                            Price = 21.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("2c99c878-415d-4106-aedf-d631283dae2a"),
                            Description = "Formal shirt for men",
                            Discount = 0.15m,
                            Name = "Men's Shirt",
                            Price = 34.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("04c9017f-54c8-4b7a-9005-891935fa118a"),
                            Description = "Stylish jacket for women",
                            Discount = 0m,
                            Name = "Women's Jacket",
                            Price = 54.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("23733e49-a32c-48bc-9211-b48feca50263"),
                            Description = "Cozy hoodie for kids",
                            Discount = 0m,
                            Name = "Kids' Hoodie",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("dd4fe700-2d01-4010-8149-9fdfec5fef77"),
                            Description = "Warm sweater for men",
                            Discount = 0.1m,
                            Name = "Men's Sweater",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("516a9a73-df2e-45eb-8d5c-ac53645d6574"),
                            Description = "Elegant blazer for women",
                            Discount = 0.2m,
                            Name = "Women's Blazer",
                            Price = 59.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("1933a740-9827-4a34-ae50-73c542ecdaf6"),
                            Description = "Casual shorts for kids",
                            Discount = 0m,
                            Name = "Kids' Shorts",
                            Price = 15.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("1383d648-8cb3-4289-830d-088ee8749682"),
                            Description = "Classic pants for men",
                            Discount = 0.1m,
                            Name = "Men's Pants",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("63903add-86c3-4d2f-8021-27a86a7bcf59"),
                            Description = "Cozy sweater for women",
                            Discount = 0m,
                            Name = "Women's Sweater",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("d1822590-4e78-45e2-b601-e4ec78ecdbee"),
                            Description = "Adorable shirt for kids",
                            Discount = 0.15m,
                            Name = "Kids' Shirt",
                            Price = 17.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("9d4493b1-b23c-4f3f-a6a3-b33162bfb9fd"),
                            Description = "Comfortable hoodie for men",
                            Discount = 0m,
                            Name = "Men's Hoodie",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("c517ab5c-311d-4a0e-a73f-a0946eb0ee25"),
                            Description = "Stylish pants for women",
                            Discount = 0.05m,
                            Name = "Women's Pants",
                            Price = 44.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("0665fdca-a4f6-4e59-8bdf-aa89e27589bc"),
                            Description = "Warm sweater for kids",
                            Discount = 0m,
                            Name = "Kids' Sweater",
                            Price = 34.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("d66f6447-b1b7-4ca1-af2e-5c3581a85e0d"),
                            Description = "Sporty sneakers for men",
                            Discount = 0.1m,
                            Name = "Men's Sneakers",
                            Price = 54.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("0615666c-51ae-43da-baf6-af4fe1d644fd"),
                            Description = "Casual t-shirt for women",
                            Discount = 0.2m,
                            Name = "Women's T-Shirt",
                            Price = 19.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("94f029b8-d502-493e-9e41-83c16fa6d05d"),
                            Description = "Stylish jacket for kids",
                            Discount = 0m,
                            Name = "Kids' Jacket",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("08d7fefa-56ff-47e9-8abc-6b48bd025949"),
                            Description = "Comfortable shorts for men",
                            Discount = 0m,
                            Name = "Men's Shorts",
                            Price = 24.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("d9b6e6f6-f3ec-4374-a40d-aa543f9f94fe"),
                            Description = "Fashionable sandals for women",
                            Discount = 0.1m,
                            Name = "Women's Sandals",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("3ead5485-b8a7-4377-be09-53054bd002e8"),
                            Description = "Stylish trousers for kids",
                            Discount = 0.05m,
                            Name = "Kids' Trousers",
                            Price = 34.99m,
                            Rate = 0m
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.ProductColorSizeQuantity", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "Color", "Size");

                    b.ToTable("ProductsInfo");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product_IMG", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductID", "ImageURL");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("E_Commerce.DAL.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductWishList", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishListsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsId", "WishListsId");

                    b.HasIndex("WishListsId");

                    b.ToTable("ProductWishList");
                });

            modelBuilder.Entity("E_Commerce.DAL.Customer", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<decimal?>("CardNumber")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MidName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameOnCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WishListID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CartID")
                        .IsUnique()
                        .HasFilter("[CartID] IS NOT NULL");

                    b.HasIndex("WishListID")
                        .IsUnique()
                        .HasFilter("[WishListID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = "07d96ed8-155d-49c7-a77a-615f109d77c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "901f16f7-d759-48fd-abff-998636fb5470",
                            Email = "johndoe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "123-456-7890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae33ba4b-d8c5-4522-bdfc-f551d8b9303f",
                            TwoFactorEnabled = false,
                            CardNumber = 1234567890123456m,
                            City = "New York",
                            Country = "Ukraine",
                            ExpireDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Doe",
                            MidName = "E",
                            NameOnCard = " John E Doe",
                            Role = "User",
                            Street = "123 Main St"
                        },
                        new
                        {
                            Id = "c7d3e80a-7a4a-4c54-91a6-89c0df051c94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d69dfcca-fb57-4fef-bddd-6bcd959f3528",
                            Email = "janesmith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ebbaff5-9f01-4a3c-8827-e44e611ac3e5",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543210987654m,
                            City = "Los Angeles",
                            Country = "Turkey",
                            ExpireDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            LastName = "Smith",
                            MidName = "A",
                            NameOnCard = " Jane A Smith",
                            Role = "User",
                            Street = "456 Elm St"
                        },
                        new
                        {
                            Id = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a53fa270-5002-4e58-8920-f34ca391bd97",
                            Email = "emilyanderson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "111-222-3333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d97a82c9-303a-4673-b2b6-6b2d56f18b57",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543210123456m,
                            City = "San Francisco",
                            Country = "Australia",
                            ExpireDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Emily",
                            LastName = "Anderson",
                            MidName = "R",
                            NameOnCard = "Emily R Anderson",
                            Role = "User",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08d75039-21d2-4353-8cb8-8b0211a7e7bf",
                            Email = "michaelwilson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "444-555-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31f5811d-3b18-4bea-980d-0af7f5fefa36",
                            TwoFactorEnabled = false,
                            CardNumber = 1234987654321098m,
                            City = "London",
                            Country = "Albania",
                            ExpireDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Michael",
                            LastName = "Wilson",
                            MidName = "J",
                            NameOnCard = "Michael J Wilson",
                            Role = "User",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = "e23edc32-bd6a-4b6b-a28e-ccf60b5c32dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "220bb7b5-1efc-41f7-bf92-a3425e93d627",
                            Email = "sarahthompson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-777-8888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2dd96a38-4b70-4789-a1ce-1471782ec9a7",
                            TwoFactorEnabled = false,
                            CardNumber = 9876012345678901m,
                            City = "Sydney",
                            Country = "Australia",
                            ExpireDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sarah",
                            LastName = "Thompson",
                            MidName = "L",
                            NameOnCard = "Sarah L Thompson",
                            Role = "User",
                            Street = "789 Pine St"
                        },
                        new
                        {
                            Id = "f0e7f09e-c7ad-4cb0-8f19-6540b4c7c49f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5af1728-00ad-433d-a37d-48388f4c228f",
                            Email = "davidmiller@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "999-888-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb3f8e0b-b2fc-4d72-b886-2828de973469",
                            TwoFactorEnabled = false,
                            CardNumber = 5432109876543210m,
                            City = "Toronto",
                            Country = "Canada",
                            ExpireDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "David",
                            LastName = "Miller",
                            MidName = "M",
                            NameOnCard = "David M Miller",
                            Role = "User",
                            Street = "123 Oak Ave"
                        },
                        new
                        {
                            Id = "22ac8dc9-4385-48ae-90a3-7d8c898c6d5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7687822e-2a8e-4900-854b-360f3a01dd4b",
                            Email = "sophialee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "222-333-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4a64c76-e5d5-4e16-bc6b-a7b70d1c9192",
                            TwoFactorEnabled = false,
                            CardNumber = 1234554321098765m,
                            City = "Seoul",
                            Country = "Serbia",
                            ExpireDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sophia",
                            LastName = "Lee",
                            MidName = "K",
                            NameOnCard = "Sophia K Lee",
                            Role = "User",
                            Street = "456 Cedar St"
                        },
                        new
                        {
                            Id = "b6a76b15-33e5-4d26-98b9-c948c7823b84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eae79606-91ba-4d87-aead-793c382dc487",
                            Email = "danielmartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "555-666-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee5170c9-d1c5-418f-ba1d-306ab8198140",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543210012345m,
                            City = "Madrid",
                            Country = "Spain",
                            ExpireDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daniel",
                            LastName = "Martinez",
                            MidName = "T",
                            NameOnCard = "Daniel T Martinez",
                            Role = "User",
                            Street = "789 Walnut Ave"
                        },
                        new
                        {
                            Id = "0e67a2e5-df53-4a92-9854-8e1ad46a4e61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70d3d26f-5a5e-4c65-bced-d98020d8d3a1",
                            Email = "oliviabrown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "888-777-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a8af891-0532-4f86-8892-e48a7d2dda9e",
                            TwoFactorEnabled = false,
                            CardNumber = 5432101234567890m,
                            City = "Paris",
                            Country = "France",
                            ExpireDate = new DateTime(2022, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Olivia",
                            LastName = "Brown",
                            MidName = "N",
                            NameOnCard = "Olivia N Brown",
                            Role = "User",
                            Street = "123 Cherry St"
                        },
                        new
                        {
                            Id = "74f5b2b3-3d10-4a85-93b5-8c6d0c992b58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8097a45-4bda-4c4c-ab7c-7ee6fd58dbe3",
                            Email = "alexjohnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfbfff43-234e-4ece-a766-c5b2bcb60cc1",
                            TwoFactorEnabled = false,
                            CardNumber = 5432167890123456m,
                            City = "Chicago",
                            Country = "Zimbabwe",
                            ExpireDate = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alex",
                            LastName = "Johnson",
                            MidName = "S",
                            NameOnCard = " Alex S Johnson",
                            Role = "User",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = "724587e6-9314-4fe6-9c3e-6fd612f50234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "653c5e6a-b64b-43d5-a6c0-b9f9b390ccca",
                            Email = "williamtaylor@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "111-222-3333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf804a3c-fa95-4e61-b31f-739ee8cb9276",
                            TwoFactorEnabled = false,
                            CardNumber = 1234567812345678m,
                            City = "London",
                            Country = "Andorra",
                            ExpireDate = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "William",
                            LastName = "Taylor",
                            MidName = "G",
                            NameOnCard = "William G Taylor",
                            Role = "User",
                            Street = "123 Elm St"
                        },
                        new
                        {
                            Id = "234cdf89-12a3-45b6-789c-0123456789de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8657d3dc-aa8f-4011-8820-a696fc57dbeb",
                            Email = "emmajdavis@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "444-555-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67ca2f08-89e0-4b7b-85fa-40906014e88b",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543298765432m,
                            City = "New York",
                            Country = "Bangladesh",
                            ExpireDate = new DateTime(2025, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Emma",
                            LastName = "Davis",
                            MidName = "J",
                            NameOnCard = "Emma J Davis",
                            Role = "User",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = "6789abcd-ef01-2345-6789-abcd01234567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a37ea4d-ad0a-4c72-b2ba-8b9fda608529",
                            Email = "liammwilson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43716fb9-1348-4047-87c3-8c26ef7acd16",
                            TwoFactorEnabled = false,
                            CardNumber = 1234987654321098m,
                            City = "Los Angeles",
                            Country = "Somalia",
                            ExpireDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Liam",
                            LastName = "Wilson",
                            MidName = "M",
                            NameOnCard = "Liam M Wilson",
                            Role = "User",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = "bcdef012-3456-789a-bcde-f01234567890",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3822bb6a-ac1e-4e0d-b196-f2de89129435",
                            Email = "olivialthompson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-777-8888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f847093-3730-4b61-a67d-a88c7745f13f",
                            TwoFactorEnabled = false,
                            CardNumber = 9876012345678901m,
                            City = "Sydney",
                            Country = "Australia",
                            ExpireDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Olivia",
                            LastName = "Thompson",
                            MidName = "L",
                            NameOnCard = "Olivia L Thompson",
                            Role = "User",
                            Street = "123 Pine St"
                        },
                        new
                        {
                            Id = "2345cdef-0123-4567-89ab-cdef01234567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95be0e83-7841-40e9-9196-1354a9be4dc3",
                            Email = "noahajohnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "222-333-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76b60d48-f3c1-40d2-bf09-ec4f71724287",
                            TwoFactorEnabled = false,
                            CardNumber = 1234554321098765m,
                            City = "Seattle",
                            Country = "Kiribati",
                            ExpireDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Noah",
                            LastName = "Johnson",
                            MidName = "A",
                            NameOnCard = "Noah A Johnson",
                            Role = "User",
                            Street = "456 Cedar St"
                        },
                        new
                        {
                            Id = "8901def0-1234-5678-9abc-def012345678",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb2da114-e802-4ae9-81c3-4f1621030f35",
                            Email = "avaklee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "555-666-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32f18dc3-aa90-4bdf-acfd-c9355d5f6b33",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543298765432m,
                            City = "San Francisco",
                            Country = "Uruguay",
                            ExpireDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ava",
                            LastName = "Lee",
                            MidName = "K",
                            NameOnCard = "Ava K Lee",
                            Role = "User",
                            Street = "789 Walnut Ave"
                        },
                        new
                        {
                            Id = "23456789-01ab-cdef-0123-456789abcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed62e57e-28a0-4a1e-b5af-e1cd960e8541",
                            Email = "isabellatmartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "888-777-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2acae11b-ab6c-47cc-9cc4-a7ccce5884a2",
                            TwoFactorEnabled = false,
                            CardNumber = 5432109876543210m,
                            City = "Madrid",
                            Country = "Spain",
                            ExpireDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Isabella",
                            LastName = "Martinez",
                            MidName = "T",
                            NameOnCard = "Isabella T Martinez",
                            Role = "User",
                            Street = "123 Cherry St"
                        },
                        new
                        {
                            Id = "def01234-5678-9abc-def0-123456789abc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abf1096f-7f11-498b-ba99-c11799dbe4eb",
                            Email = "sophianbrown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "999-888-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0171db6b-1012-4a2e-8d16-bbeca8b7c366",
                            TwoFactorEnabled = false,
                            CardNumber = 1234567812345678m,
                            City = "Paris",
                            Country = "France",
                            ExpireDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sophia",
                            LastName = "Brown",
                            MidName = "N",
                            NameOnCard = "Sophia N Brown",
                            Role = "User",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = "456789ab-cdef-0123-4567-89abcdef0123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ae1fce0-9170-43f1-a248-4140c7eb0c2e",
                            Email = "miasjohnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1e34b4e-4c72-4da1-9a11-3866b9a69f64",
                            TwoFactorEnabled = false,
                            CardNumber = 5432167890123456m,
                            City = "Rome",
                            Country = "Italy",
                            ExpireDate = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mia",
                            LastName = "Johnson",
                            MidName = "S",
                            NameOnCard = "Mia S Johnson",
                            Role = "User",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = "56789abc-def0-1234-5678-9abcdef01234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "563ffe1c-42bc-4698-b745-c283abdc13d9",
                            Email = "logantmartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "555-666-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f50d9b2-8308-4e66-b7a5-94604a177670",
                            TwoFactorEnabled = false,
                            CardNumber = 1234987654321098m,
                            City = "Tokyo",
                            Country = "Japan",
                            ExpireDate = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Logan",
                            LastName = "Martinez",
                            MidName = "T",
                            NameOnCard = "Logan T Martinez",
                            Role = "User",
                            Street = "123 Walnut Ave"
                        });
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("E_Commerce.DAL.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.CartProduct", b =>
                {
                    b.HasOne("E_Commerce.DAL.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Category", b =>
                {
                    b.HasOne("E_Commerce.DAL.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("E_Commerce.DAL.CustomerReview", b =>
                {
                    b.HasOne("E_Commerce.DAL.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Order", b =>
                {
                    b.HasOne("E_Commerce.DAL.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Commerce.DAL.OrderProduct", b =>
                {
                    b.HasOne("E_Commerce.DAL.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.ProductColorSizeQuantity", b =>
                {
                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("Product_Color_Size_Quantity")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product_IMG", b =>
                {
                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductWishList", b =>
                {
                    b.HasOne("E_Commerce.DAL.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.WishList", null)
                        .WithMany()
                        .HasForeignKey("WishListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.Customer", b =>
                {
                    b.HasOne("E_Commerce.DAL.Cart", "Cart")
                        .WithOne("Customer")
                        .HasForeignKey("E_Commerce.DAL.Customer", "CartID");

                    b.HasOne("E_Commerce.DAL.WishList", "WishList")
                        .WithOne("Customer")
                        .HasForeignKey("E_Commerce.DAL.Customer", "WishListID");

                    b.Navigation("Cart");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("E_Commerce.DAL.Cart", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.DAL.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("E_Commerce.DAL.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Product_Color_Size_Quantity");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("E_Commerce.DAL.WishList", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
