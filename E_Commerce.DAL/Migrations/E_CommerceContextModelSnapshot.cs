// <auto-generated />
using System;
using E_Commerce.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.DAL.Migrations
{
    [DbContext(typeof(E_CommerceContext))]
    partial class E_CommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("E_Commerce.DAL.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = new Guid("066d0811-976d-4de0-9628-4d62f6a7a489"),
                            CustomerId = new Guid("c7d3e80a-7a4a-4c54-91a6-89c0df051c94")
                        },
                        new
                        {
                            CartId = new Guid("5320399c-59b4-4b4b-9ae7-b9f8ff070819"),
                            CustomerId = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992bb7")
                        },
                        new
                        {
                            CartId = new Guid("1249e792-21bf-4fc6-b868-e428b890e8cd"),
                            CustomerId = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992bb8")
                        },
                        new
                        {
                            CartId = new Guid("790489a4-44b4-4be3-9058-25079018f9cd"),
                            CustomerId = new Guid("e23edc32-bd6a-4b6b-a28e-ccf60b5c32dc")
                        },
                        new
                        {
                            CartId = new Guid("ee9c5596-457f-41c2-ba56-3a3b45a43b26"),
                            CustomerId = new Guid("f0e7f09e-c7ad-4cb0-8f19-6540b4c7c49f")
                        },
                        new
                        {
                            CartId = new Guid("b83afd3b-ce80-438f-b164-6ae617369124"),
                            CustomerId = new Guid("22ac8dc9-4385-48ae-90a3-7d8c898c6d5d")
                        },
                        new
                        {
                            CartId = new Guid("4a08771c-c45f-45ad-b42b-08bdd8632c31"),
                            CustomerId = new Guid("b6a76b15-33e5-4d26-98b9-c948c7823b84")
                        },
                        new
                        {
                            CartId = new Guid("9a30eec1-dc58-49e5-87a6-c0b04d92b380"),
                            CustomerId = new Guid("0e67a2e5-df53-4a92-9854-8e1ad46a4e61")
                        },
                        new
                        {
                            CartId = new Guid("7abdcce6-8476-4a6c-8aa0-ae8c23a8a6d5"),
                            CustomerId = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992b58")
                        },
                        new
                        {
                            CartId = new Guid("76e383b5-c96b-49cd-99e2-88a1b3cd5d2a"),
                            CustomerId = new Guid("724587e6-9314-4fe6-9c3e-6fd612f50234")
                        },
                        new
                        {
                            CartId = new Guid("55bfe533-b5fe-4ca8-90d7-c24fa181a315"),
                            CustomerId = new Guid("234cdf89-12a3-45b6-789c-0123456789de")
                        },
                        new
                        {
                            CartId = new Guid("e236d386-936b-4d66-9e6b-2c3b021d6654"),
                            CustomerId = new Guid("6789abcd-ef01-2345-6789-abcd01234567")
                        },
                        new
                        {
                            CartId = new Guid("8317aa6e-c4f8-409d-91ab-2155f797b4b8"),
                            CustomerId = new Guid("bcdef012-3456-789a-bcde-f01234567890")
                        },
                        new
                        {
                            CartId = new Guid("73b0bbce-0f93-4996-a69c-0aecb4563582"),
                            CustomerId = new Guid("2345cdef-0123-4567-89ab-cdef01234567")
                        },
                        new
                        {
                            CartId = new Guid("afbb757b-678f-4871-96b6-0b4c0b35a679"),
                            CustomerId = new Guid("8901def0-1234-5678-9abc-def012345678")
                        },
                        new
                        {
                            CartId = new Guid("3e11c8f0-27e0-466a-8ca7-e8830b925b73"),
                            CustomerId = new Guid("23456789-01ab-cdef-0123-456789abcdef")
                        },
                        new
                        {
                            CartId = new Guid("20649b59-73b8-4f61-8199-dc112128bee6"),
                            CustomerId = new Guid("def01234-5678-9abc-def0-123456789abc")
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.CartProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("E_Commerce.DAL.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583"),
                            Description = "Men's Clothing",
                            Image = "men.jpg",
                            Name = "Men"
                        },
                        new
                        {
                            Id = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d"),
                            Description = "Women's Clothing",
                            Image = "Women.jpg",
                            Name = "Women"
                        },
                        new
                        {
                            Id = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f"),
                            Description = "Kids's Clothing",
                            Image = "Kids.jpg",
                            Name = "Kids"
                        },
                        new
                        {
                            Id = new Guid("f032f788-2340-431f-9f8f-eeb176a35177"),
                            Description = "Mens shirts's Clothing",
                            Image = "men shirts.jpg",
                            Name = "Shirts",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("a6c4de53-33c5-48e1-9f21-5649726d3a3d"),
                            Description = "Women shirts's Clothing",
                            Image = "Women shirts.jpg",
                            Name = "Shirts",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("8a6d4a19-47cc-4a4e-822b-cac1de2efc8d"),
                            Description = "Kids shirts's Clothing",
                            Image = "Kids shirts.jpg",
                            Name = "Shirts",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("9a938bc1-0717-4b8d-8f8b-3a2f55de49db"),
                            Description = "Men Pants's Clothing",
                            Image = "men Pants.jpg",
                            Name = "Pants",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("d9f02e92-d14c-4b6d-86ad-6e4e6c48020a"),
                            Description = "Women Pants's Clothing",
                            Image = "Women Pants.jpg",
                            Name = "Pants",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("1d53debe-03e6-487f-9b34-6b26c68fc1e5"),
                            Description = "Kids Pants's Clothing",
                            Image = "Kids Pants.jpg",
                            Name = "Pants",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("6b3c4ef5-01ad-49c7-a8ff-36ae55d0ce8d"),
                            Description = "Men Shoes's Clothing",
                            Image = "men Shoes.jpg",
                            Name = "Shoes",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("35b303b9-25a0-4379-89b3-64e4ae51291f"),
                            Description = "Women Shoes's Clothing",
                            Image = "Women Shoes.jpg",
                            Name = "Shoes",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("ca09f6a1-5b87-4b56-9ee3-c6fb6ad070c2"),
                            Description = "Kids Shoes's Clothing",
                            Image = "Kids Shoes.jpg",
                            Name = "Shoes",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("6f6c6c4c-9e6e-4e0c-97cc-8b52c055918b"),
                            Description = "Men Jackets's Clothing",
                            Image = "men Jackets.jpg",
                            Name = "Jackets",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("47a38a48-8747-4461-ba32-7e573be663ee"),
                            Description = "Women Jackets's Clothing",
                            Image = "Women Jackets.jpg",
                            Name = "Jackets",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("b19a53a3-04e7-4804-84bc-84da64d738a6"),
                            Description = "Kids Jackets's Clothing",
                            Image = "Kids Jackets.jpg",
                            Name = "Jackets",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        },
                        new
                        {
                            Id = new Guid("a6d7e8b5-2f4d-4f51-b24b-4fcb52e36f5f"),
                            Description = "Men Hoodies's Clothing",
                            Image = "men Hoodies.jpg",
                            Name = "Hoodies",
                            ParentCategoryId = new Guid("edc6b9e0-9252-4e9d-b4d3-9203b6de2583")
                        },
                        new
                        {
                            Id = new Guid("e18e42b7-799e-4b3b-a084-c55d4bb5da3f"),
                            Description = "Women Hoodies's Clothing",
                            Image = "Women Hoodies.jpg",
                            Name = "Hoodies",
                            ParentCategoryId = new Guid("a6c4de53-33c5-48e1-9f21-5649726d2a3d")
                        },
                        new
                        {
                            Id = new Guid("c2ae51c9-913a-4e7d-a7b5-ef1efc8f9d3e"),
                            Description = "Kids Hoodies's Clothing",
                            Image = "Kids Hoodies.jpg",
                            Name = "Hoodies",
                            ParentCategoryId = new Guid("52d40b0a-7039-4bc6-899d-0c36adff6b8f")
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.CustomerReview", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersReviews");
                });

            modelBuilder.Entity("E_Commerce.DAL.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderData")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7d3e80a-7a4a-4c54-91a6-89c0df051c94"),
                            ArrivalDate = new DateTime(2029, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Iraq",
                            CustomerId = "07d96ed8-155d-49c7-a77a-615f109d77c3",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2029, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "567 Oak St"
                        },
                        new
                        {
                            Id = new Guid("6789abcd-ef01-2345-6789-abcd01234567"),
                            ArrivalDate = new DateTime(2029, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Seattle",
                            Country = "Libya",
                            CustomerId = "c7d3e80a-7a4a-4c54-91a6-89c0df051c94",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2029, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = new Guid("8901def0-1234-5678-9abc-def012345678"),
                            ArrivalDate = new DateTime(2029, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Country = "Afghanistan",
                            CustomerId = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb7",
                            Discount = 0.0,
                            OrderData = new DateTime(2029, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Unpaid",
                            Street = "123 Pine St"
                        },
                        new
                        {
                            Id = new Guid("b6a76b15-33e5-4d26-98b9-c948c7823b84"),
                            ArrivalDate = new DateTime(2029, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Los Angeles",
                            Country = "Andorra",
                            CustomerId = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb8",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2029, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = new Guid("07d96ed8-155d-49c7-a77a-615f109d77c3"),
                            ArrivalDate = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Zimbabwe",
                            CustomerId = "e23edc32-bd6a-4b6b-a28e-ccf60b5c32dc",
                            Discount = 1.0,
                            OrderData = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = new Guid("07d96ed8-155d-49c7-a77a-615f109d75c3"),
                            ArrivalDate = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Zimbabwe",
                            CustomerId = "b6a76b15-33e5-4d26-98b9-c948c7823b84",
                            Discount = 1.0,
                            OrderData = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = new Guid("0e67a2e5-df53-4a92-9854-8e1ad46a4e61"),
                            ArrivalDate = new DateTime(2027, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "New York",
                            Country = "Belgium",
                            CustomerId = "0e67a2e5-df53-4a92-9854-8e1ad46a4e61",
                            Discount = 0.0,
                            OrderData = new DateTime(2027, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Unpaid",
                            Street = "123 Elm St"
                        },
                        new
                        {
                            Id = new Guid("22ac8dc9-4385-48ae-90a3-7d8c898c6d5d"),
                            ArrivalDate = new DateTime(2027, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Los Angeles",
                            Country = "Belize",
                            CustomerId = "74f5b2b3-3d10-4a85-93b5-8c6d0c992b58",
                            Discount = 0.5,
                            OrderData = new DateTime(2027, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "456 Main St"
                        },
                        new
                        {
                            Id = new Guid("f0e7f09e-c7ad-4cb0-8f19-6540b4c7c49f"),
                            ArrivalDate = new DateTime(2029, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Canada",
                            CustomerId = "724587e6-9314-4fe6-9c3e-6fd612f50234",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2028, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Unpaid",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = new Guid("23456789-01ab-cdef-0123-456789abcdef"),
                            ArrivalDate = new DateTime(2027, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Country = "Oman",
                            CustomerId = "234cdf89-12a3-45b6-789c-0123456789de",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2027, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "321 Maple Ave"
                        },
                        new
                        {
                            Id = new Guid("2345cdef-0123-4567-89ab-cdef11234567"),
                            ArrivalDate = new DateTime(2027, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Seattle",
                            Country = "Taiwan",
                            CustomerId = "6789abcd-ef01-2345-6789-abcd01234567",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2027, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "567 Pine St"
                        },
                        new
                        {
                            Id = new Guid("def01234-5678-9abc-def0-113456789abc"),
                            ArrivalDate = new DateTime(2028, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Miami",
                            Country = "Fiji",
                            CustomerId = "bcdef012-3456-789a-bcde-f01234567890",
                            Discount = 0.29999999999999999,
                            OrderData = new DateTime(2028, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "901 Cherry Ln"
                        },
                        new
                        {
                            Id = new Guid("e23edc32-bd6a-4b6b-a28e-ccf90b5c32dc"),
                            ArrivalDate = new DateTime(2028, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Boston",
                            Country = "Denmark",
                            CustomerId = "2345cdef-0123-4567-89ab-cdef01234567",
                            Discount = 0.14999999999999999,
                            OrderData = new DateTime(2028, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "246 Elm St"
                        },
                        new
                        {
                            Id = new Guid("f0e7f09e-c7ad-4cb0-8f19-6540b5c7c49f"),
                            ArrivalDate = new DateTime(2029, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "Canada",
                            CustomerId = "8901def0-1234-5678-9abc-def012345678",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2029, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Unpaid",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = new Guid("724587e6-9314-4fe6-9c3e-7fd612f50234"),
                            ArrivalDate = new DateTime(2029, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Dallas",
                            Country = "Samoa",
                            CustomerId = "b6a76b15-33e5-4d26-98b9-c948c7823b84",
                            Discount = 0.10000000000000001,
                            OrderData = new DateTime(2029, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "987 Cedar St"
                        },
                        new
                        {
                            Id = new Guid("74f5b2b3-3d10-4a85-93b5-8c6d0c992b58"),
                            ArrivalDate = new DateTime(2029, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Diego",
                            Country = "Samoa",
                            CustomerId = "bcdef012-3456-789a-bcde-f01234567890",
                            Discount = 0.0,
                            OrderData = new DateTime(2029, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Unpaid",
                            Street = "456 Oak St"
                        },
                        new
                        {
                            Id = new Guid("724587e6-9314-4fe6-9c3e-7fd612f50233"),
                            ArrivalDate = new DateTime(2029, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Seattle",
                            Country = "Samoa",
                            CustomerId = "c7d3e80a-7a4a-4c54-91a6-89c0df051c94",
                            Discount = 0.20000000000000001,
                            OrderData = new DateTime(2029, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            PaymentMethod = "CashOnDelivery",
                            PaymentStatus = "Paid",
                            Street = "789 Pine St"
                        },
                        new
                        {
                            Id = new Guid("724587e6-9314-4fe6-9c3e-7fd612f50232"),
                            ArrivalDate = new DateTime(2029, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Country = "Senegal",
                            CustomerId = "def01234-5678-9abc-def0-123456789abc",
                            Discount = 0.29999999999999999,
                            OrderData = new DateTime(2029, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            Street = "123 Maple Ave"
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.OrderProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89a8271b-b776-42b5-9b86-e6199b5663d3"),
                            Description = "Comfortable cotton t-shirt for men",
                            Discount = 0m,
                            Name = "Men's T-Shirt",
                            Price = 15.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("8feba8fb-8d90-40f8-949c-cfe05dbeb387"),
                            Description = "Elegant dress for women",
                            Discount = 0.1m,
                            Name = "Women's Dress",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("992b11f7-cfd8-4320-8794-de5736d81553"),
                            Description = "Colorful shoes for kids",
                            Discount = 0.15m,
                            Name = "Kids' Shoes",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("879677f7-5bd6-4252-96ba-37ad320800db"),
                            Description = "Warm hoodie for men",
                            Discount = 0.05m,
                            Name = "Men's Hoodie",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("f94ec50f-f4da-4e7e-a98e-fc05df0f120b"),
                            Description = "Comfortable cotton t-shirt for men",
                            Discount = 0m,
                            Name = "Men's T-Shirt",
                            Price = 15.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("81cd0f24-cd18-4ac8-91a3-716f00f7f588"),
                            Description = "Elegant dress for women",
                            Discount = 0.1m,
                            Name = "Women's Dress",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("dca11a56-5056-4739-b0bf-0e540a427c68"),
                            Description = "Colorful shoes for kids",
                            Discount = 0.15m,
                            Name = "Kids' Shoes",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("0583e055-d3d3-4959-85ff-726778e803a4"),
                            Description = "Classic denim jeans for men",
                            Discount = 0.05m,
                            Name = "Men's Jeans",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("1edbe019-593a-4b74-aabb-94753b4c2981"),
                            Description = "Stylish blouse for women",
                            Discount = 0m,
                            Name = "Women's Blouse",
                            Price = 24.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("a80774ba-4f98-43b5-bd34-b4d1170376c9"),
                            Description = "Spacious backpack for kids",
                            Discount = 0m,
                            Name = "Kids' Backpack",
                            Price = 19.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("aee11cbf-63b2-4991-b61c-daabd716b07f"),
                            Description = "Casual shorts for men",
                            Discount = 0.1m,
                            Name = "Men's Shorts",
                            Price = 17.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("bd295128-1539-4b03-bbae-09ea9bd8dbf4"),
                            Description = "Comfortable sandals for women",
                            Discount = 0.2m,
                            Name = "Women's Sandals",
                            Price = 34.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("fa571836-02f2-46f1-ae66-08f30eea815e"),
                            Description = "Adorable t-shirt for kids",
                            Discount = 0m,
                            Name = "Kids' T-Shirt",
                            Price = 12.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("07138a43-c3d5-4f7c-8132-2faa07974efb"),
                            Description = "Stylish sneakers for men",
                            Discount = 0.15m,
                            Name = "Men's Sneakers",
                            Price = 59.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("87b84045-c24a-4a37-aa3b-1dd67cfd6f46"),
                            Description = "Fashionable skirt for women",
                            Discount = 0m,
                            Name = "Women's Skirt",
                            Price = 27.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("7a216f01-84ff-4278-b6f1-cc44d5219eef"),
                            Description = "Warm jacket for kids",
                            Discount = 0.1m,
                            Name = "Kids' Jacket",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("6573c117-5467-4abd-9174-427ad40d6060"),
                            Description = "Classic polo shirt for men",
                            Discount = 0m,
                            Name = "Men's Polo Shirt",
                            Price = 22.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("e6b4e2dd-2ae0-4731-acdd-622e6a4625b6"),
                            Description = "Stylish denim jeans for women",
                            Discount = 0.05m,
                            Name = "Women's Jeans",
                            Price = 44.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("121dbc21-8364-4f90-995b-37ef8b709457"),
                            Description = "Cute dress for kids",
                            Discount = 0m,
                            Name = "Kids' Dress",
                            Price = 32.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("186fbc59-fea1-4462-9d4c-c45a76790486"),
                            Description = "Warm jacket for men",
                            Discount = 0.2m,
                            Name = "Men's Jacket",
                            Price = 59.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("9f84933a-b2d2-4f45-b4f1-6520b84de33f"),
                            Description = "Sporty sneakers for women",
                            Discount = 0m,
                            Name = "Women's Sneakers",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("8457349a-ac5c-4ef2-8ed3-6e2285171e86"),
                            Description = "Casual trousers for kids",
                            Discount = 0.1m,
                            Name = "Kids' Trousers",
                            Price = 21.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("41fad452-934f-4f1d-acc3-e6c15127ae18"),
                            Description = "Formal shirt for men",
                            Discount = 0.15m,
                            Name = "Men's Shirt",
                            Price = 34.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("a9683ca2-a097-485f-841f-53bd48490384"),
                            Description = "Stylish jacket for women",
                            Discount = 0m,
                            Name = "Women's Jacket",
                            Price = 54.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("187f4763-a3b1-413e-b67b-b00ae0598082"),
                            Description = "Cozy hoodie for kids",
                            Discount = 0m,
                            Name = "Kids' Hoodie",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("f558d6ea-db03-4e8a-8b17-543b5e0d2ebf"),
                            Description = "Warm sweater for men",
                            Discount = 0.1m,
                            Name = "Men's Sweater",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("7cba46fb-1788-4b1f-bf60-a1f8bdde01f5"),
                            Description = "Elegant blazer for women",
                            Discount = 0.2m,
                            Name = "Women's Blazer",
                            Price = 59.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("bd375375-8b2c-48d9-bfc3-eec9c3c356a9"),
                            Description = "Casual shorts for kids",
                            Discount = 0m,
                            Name = "Kids' Shorts",
                            Price = 15.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("16cce66d-2095-446a-a98b-5c265c37914f"),
                            Description = "Classic pants for men",
                            Discount = 0.1m,
                            Name = "Men's Pants",
                            Price = 49.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("db8053ba-4ead-4544-ade7-3e4d28b63cc0"),
                            Description = "Cozy sweater for women",
                            Discount = 0m,
                            Name = "Women's Sweater",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("f8304abd-fc0a-4422-9200-9f5f7835c379"),
                            Description = "Adorable shirt for kids",
                            Discount = 0.15m,
                            Name = "Kids' Shirt",
                            Price = 17.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("a83d7372-500e-48be-97de-24adb11b9375"),
                            Description = "Comfortable hoodie for men",
                            Discount = 0m,
                            Name = "Men's Hoodie",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("8bb21301-4ab2-4907-ab8c-bfbbc1e2791c"),
                            Description = "Stylish pants for women",
                            Discount = 0.05m,
                            Name = "Women's Pants",
                            Price = 44.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("096f4a1a-b891-4d3e-aa59-e1ea82366b72"),
                            Description = "Warm sweater for kids",
                            Discount = 0m,
                            Name = "Kids' Sweater",
                            Price = 34.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("b167c6f3-206f-4b07-be13-cf7cfaa9d5a5"),
                            Description = "Sporty sneakers for men",
                            Discount = 0.1m,
                            Name = "Men's Sneakers",
                            Price = 54.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("630ffc92-2863-46de-b49b-e81951a7731f"),
                            Description = "Casual t-shirt for women",
                            Discount = 0.2m,
                            Name = "Women's T-Shirt",
                            Price = 19.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("685e5749-8154-415b-a254-baa8971db59f"),
                            Description = "Stylish jacket for kids",
                            Discount = 0m,
                            Name = "Kids' Jacket",
                            Price = 39.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("69dd35ba-3646-43b8-ae41-8a44706f912b"),
                            Description = "Comfortable shorts for men",
                            Discount = 0m,
                            Name = "Men's Shorts",
                            Price = 24.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("e70095d5-c4d6-4777-b692-da434a80b332"),
                            Description = "Fashionable sandals for women",
                            Discount = 0.1m,
                            Name = "Women's Sandals",
                            Price = 29.99m,
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("60592786-71a3-4169-98e4-51a5056fe57c"),
                            Description = "Stylish trousers for kids",
                            Discount = 0.05m,
                            Name = "Kids' Trousers",
                            Price = 34.99m,
                            Rate = 0m
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.ProductColorSizeQuantity", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "Color", "Size");

                    b.ToTable("ProductsInfo");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product_IMG", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductID", "ImageURL");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("E_Commerce.DAL.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductWishList", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishListsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsId", "WishListsId");

                    b.HasIndex("WishListsId");

                    b.ToTable("ProductWishList");
                });

            modelBuilder.Entity("E_Commerce.DAL.Customer", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<decimal?>("CardNumber")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MidName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameOnCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WishListID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CartID")
                        .IsUnique()
                        .HasFilter("[CartID] IS NOT NULL");

                    b.HasIndex("WishListID")
                        .IsUnique()
                        .HasFilter("[WishListID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = "07d96ed8-155d-49c7-a77a-615f109d77c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d632ff4d-0098-41f0-81c3-935c93427a1d",
                            Email = "johndoe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "123-456-7890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1785d8cf-58e7-4dc0-b6ec-429eb8361df3",
                            TwoFactorEnabled = false,
                            CardNumber = 1234567890123456m,
                            City = "New York",
                            Country = "Ukraine",
                            ExpireDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Doe",
                            MidName = "E",
                            NameOnCard = " John E Doe",
                            Role = "User",
                            Street = "123 Main St"
                        },
                        new
                        {
                            Id = "c7d3e80a-7a4a-4c54-91a6-89c0df051c94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb5b4f36-55fb-47b9-adf8-63c8ff3a4d96",
                            Email = "janesmith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba17e323-9396-467c-aa6e-aeccd5dc4d89",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543210987654m,
                            City = "Los Angeles",
                            Country = "Turkey",
                            ExpireDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            LastName = "Smith",
                            MidName = "A",
                            NameOnCard = " Jane A Smith",
                            Role = "User",
                            Street = "456 Elm St"
                        },
                        new
                        {
                            Id = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc2778e9-559f-4d0c-a5a2-61ffcdac639d",
                            Email = "emilyanderson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "111-222-3333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "280653d7-25a1-4b53-9fa7-67d9397983f6",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543210123456m,
                            City = "San Francisco",
                            Country = "Australia",
                            ExpireDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Emily",
                            LastName = "Anderson",
                            MidName = "R",
                            NameOnCard = "Emily R Anderson",
                            Role = "User",
                            Street = "789 Elm St"
                        },
                        new
                        {
                            Id = "74f5b2b3-3d10-4a85-93b5-8c6d0c992bb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23a941a2-3790-42a7-b0dd-0f722176aaa8",
                            Email = "michaelwilson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "444-555-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e38034d-5a5a-445e-b72b-4cda46d1233f",
                            TwoFactorEnabled = false,
                            CardNumber = 1234987654321098m,
                            City = "London",
                            Country = "Albania",
                            ExpireDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Michael",
                            LastName = "Wilson",
                            MidName = "J",
                            NameOnCard = "Michael J Wilson",
                            Role = "User",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = "e23edc32-bd6a-4b6b-a28e-ccf60b5c32dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "731291f8-2d2a-4f2f-90ff-1bdf08a2d731",
                            Email = "sarahthompson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-777-8888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca038512-ebb4-418a-87d4-41d47edab73c",
                            TwoFactorEnabled = false,
                            CardNumber = 9876012345678901m,
                            City = "Sydney",
                            Country = "Australia",
                            ExpireDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sarah",
                            LastName = "Thompson",
                            MidName = "L",
                            NameOnCard = "Sarah L Thompson",
                            Role = "User",
                            Street = "789 Pine St"
                        },
                        new
                        {
                            Id = "f0e7f09e-c7ad-4cb0-8f19-6540b4c7c49f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5b44049-56bf-477b-9b08-d0ef0e18c01f",
                            Email = "davidmiller@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "999-888-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f797ef8-c55f-4a80-8fcb-9b2c57ab550d",
                            TwoFactorEnabled = false,
                            CardNumber = 5432109876543210m,
                            City = "Toronto",
                            Country = "Canada",
                            ExpireDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "David",
                            LastName = "Miller",
                            MidName = "M",
                            NameOnCard = "David M Miller",
                            Role = "User",
                            Street = "123 Oak Ave"
                        },
                        new
                        {
                            Id = "22ac8dc9-4385-48ae-90a3-7d8c898c6d5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12318b50-ea48-4d52-98f5-d88674d21579",
                            Email = "sophialee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "222-333-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "574cb5a5-1ff3-4251-adc7-912fd8a7fbda",
                            TwoFactorEnabled = false,
                            CardNumber = 1234554321098765m,
                            City = "Seoul",
                            Country = "Serbia",
                            ExpireDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sophia",
                            LastName = "Lee",
                            MidName = "K",
                            NameOnCard = "Sophia K Lee",
                            Role = "User",
                            Street = "456 Cedar St"
                        },
                        new
                        {
                            Id = "b6a76b15-33e5-4d26-98b9-c948c7823b84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15a16a20-b2a3-4faf-9f69-ca0061495abc",
                            Email = "danielmartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "555-666-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4dc32b9-3200-419b-8b91-b0a8d10f3d44",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543210012345m,
                            City = "Madrid",
                            Country = "Spain",
                            ExpireDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daniel",
                            LastName = "Martinez",
                            MidName = "T",
                            NameOnCard = "Daniel T Martinez",
                            Role = "User",
                            Street = "789 Walnut Ave"
                        },
                        new
                        {
                            Id = "0e67a2e5-df53-4a92-9854-8e1ad46a4e61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e243dbbe-4329-4df9-8e02-381f85433a1d",
                            Email = "oliviabrown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "888-777-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e38c80a-d641-498f-9045-84f78015ae3d",
                            TwoFactorEnabled = false,
                            CardNumber = 5432101234567890m,
                            City = "Paris",
                            Country = "France",
                            ExpireDate = new DateTime(2022, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Olivia",
                            LastName = "Brown",
                            MidName = "N",
                            NameOnCard = "Olivia N Brown",
                            Role = "User",
                            Street = "123 Cherry St"
                        },
                        new
                        {
                            Id = "74f5b2b3-3d10-4a85-93b5-8c6d0c992b58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "217fa157-17dd-4ac8-9b51-2080ce548ab7",
                            Email = "alexjohnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7932a072-f86b-449e-b7db-fbb1e1d0b344",
                            TwoFactorEnabled = false,
                            CardNumber = 5432167890123456m,
                            City = "Chicago",
                            Country = "Zimbabwe",
                            ExpireDate = new DateTime(2026, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alex",
                            LastName = "Johnson",
                            MidName = "S",
                            NameOnCard = " Alex S Johnson",
                            Role = "User",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = "724587e6-9314-4fe6-9c3e-6fd612f50234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "775f7269-6abc-4878-b629-2742387ec930",
                            Email = "williamtaylor@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "111-222-3333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1cd04bf-d775-414b-b401-542e6dcfbed8",
                            TwoFactorEnabled = false,
                            CardNumber = 1234567812345678m,
                            City = "London",
                            Country = "Andorra",
                            ExpireDate = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "William",
                            LastName = "Taylor",
                            MidName = "G",
                            NameOnCard = "William G Taylor",
                            Role = "User",
                            Street = "123 Elm St"
                        },
                        new
                        {
                            Id = "234cdf89-12a3-45b6-789c-0123456789de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b6cd889-3a2f-4219-94e9-7d2234df2094",
                            Email = "emmajdavis@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "444-555-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d5f214a-816b-4421-a93a-15d66b55f98a",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543298765432m,
                            City = "New York",
                            Country = "Bangladesh",
                            ExpireDate = new DateTime(2025, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Emma",
                            LastName = "Davis",
                            MidName = "J",
                            NameOnCard = "Emma J Davis",
                            Role = "User",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = "6789abcd-ef01-2345-6789-abcd01234567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27eab550-4c98-4fef-b7f0-bb11d4f52c1a",
                            Email = "liammwilson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6f378f7-5dc8-4328-afd8-d0d84f1afcf6",
                            TwoFactorEnabled = false,
                            CardNumber = 1234987654321098m,
                            City = "Los Angeles",
                            Country = "Somalia",
                            ExpireDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Liam",
                            LastName = "Wilson",
                            MidName = "M",
                            NameOnCard = "Liam M Wilson",
                            Role = "User",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = "bcdef012-3456-789a-bcde-f01234567890",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a84773bf-ee72-48fd-9f26-10b4c5bc155b",
                            Email = "olivialthompson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-777-8888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8c1dcb9-cacb-4dd2-bda4-49bda26b0339",
                            TwoFactorEnabled = false,
                            CardNumber = 9876012345678901m,
                            City = "Sydney",
                            Country = "Australia",
                            ExpireDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Olivia",
                            LastName = "Thompson",
                            MidName = "L",
                            NameOnCard = "Olivia L Thompson",
                            Role = "User",
                            Street = "123 Pine St"
                        },
                        new
                        {
                            Id = "2345cdef-0123-4567-89ab-cdef01234567",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b204b10-5263-4e18-84fe-cc83bf90efb1",
                            Email = "noahajohnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "222-333-4444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1955f95-7a54-4887-9d30-51e6bb2262b0",
                            TwoFactorEnabled = false,
                            CardNumber = 1234554321098765m,
                            City = "Seattle",
                            Country = "Kiribati",
                            ExpireDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Noah",
                            LastName = "Johnson",
                            MidName = "A",
                            NameOnCard = "Noah A Johnson",
                            Role = "User",
                            Street = "456 Cedar St"
                        },
                        new
                        {
                            Id = "8901def0-1234-5678-9abc-def012345678",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "959c01a8-8787-47c5-b968-63b144dc74e7",
                            Email = "avaklee@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "555-666-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9a6d19b-16ad-449f-883f-b769226d4a2b",
                            TwoFactorEnabled = false,
                            CardNumber = 9876543298765432m,
                            City = "San Francisco",
                            Country = "Uruguay",
                            ExpireDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ava",
                            LastName = "Lee",
                            MidName = "K",
                            NameOnCard = "Ava K Lee",
                            Role = "User",
                            Street = "789 Walnut Ave"
                        },
                        new
                        {
                            Id = "23456789-01ab-cdef-0123-456789abcdef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "344a5705-8b0d-4343-8a42-f653e3d80dea",
                            Email = "isabellatmartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "888-777-6666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fafc83c-7765-4108-9dce-7deaca50d32d",
                            TwoFactorEnabled = false,
                            CardNumber = 5432109876543210m,
                            City = "Madrid",
                            Country = "Spain",
                            ExpireDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Isabella",
                            LastName = "Martinez",
                            MidName = "T",
                            NameOnCard = "Isabella T Martinez",
                            Role = "User",
                            Street = "123 Cherry St"
                        },
                        new
                        {
                            Id = "def01234-5678-9abc-def0-123456789abc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6371a6e7-2efe-4606-bce8-cfd7037c9255",
                            Email = "sophianbrown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "999-888-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97e29dd1-2e04-4785-b23a-6d50d95909e4",
                            TwoFactorEnabled = false,
                            CardNumber = 1234567812345678m,
                            City = "Paris",
                            Country = "France",
                            ExpireDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sophia",
                            LastName = "Brown",
                            MidName = "N",
                            NameOnCard = "Sophia N Brown",
                            Role = "User",
                            Street = "456 Maple Ave"
                        },
                        new
                        {
                            Id = "456789ab-cdef-0123-4567-89abcdef0123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43ca365e-9e80-40e8-9458-f6fc24c5a00a",
                            Email = "miasjohnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "777-888-9999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec0aac64-ab45-48c2-a0b7-9c501be463a9",
                            TwoFactorEnabled = false,
                            CardNumber = 5432167890123456m,
                            City = "Rome",
                            Country = "Italy",
                            ExpireDate = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mia",
                            LastName = "Johnson",
                            MidName = "S",
                            NameOnCard = "Mia S Johnson",
                            Role = "User",
                            Street = "789 Oak St"
                        },
                        new
                        {
                            Id = "56789abc-def0-1234-5678-9abcdef01234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8da8d714-6121-4995-bbc7-d836d8a641b9",
                            Email = "logantmartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "555-666-7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41765ca0-ab99-4564-aca4-5a5d45cdc667",
                            TwoFactorEnabled = false,
                            CardNumber = 1234987654321098m,
                            City = "Tokyo",
                            Country = "Japan",
                            ExpireDate = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Logan",
                            LastName = "Martinez",
                            MidName = "T",
                            NameOnCard = "Logan T Martinez",
                            Role = "User",
                            Street = "123 Walnut Ave"
                        });
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("E_Commerce.DAL.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.CartProduct", b =>
                {
                    b.HasOne("E_Commerce.DAL.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Category", b =>
                {
                    b.HasOne("E_Commerce.DAL.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("E_Commerce.DAL.CustomerReview", b =>
                {
                    b.HasOne("E_Commerce.DAL.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Order", b =>
                {
                    b.HasOne("E_Commerce.DAL.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Commerce.DAL.OrderProduct", b =>
                {
                    b.HasOne("E_Commerce.DAL.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.ProductColorSizeQuantity", b =>
                {
                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("Product_Color_Size_Quantity")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product_IMG", b =>
                {
                    b.HasOne("E_Commerce.DAL.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductWishList", b =>
                {
                    b.HasOne("E_Commerce.DAL.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.WishList", null)
                        .WithMany()
                        .HasForeignKey("WishListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.Customer", b =>
                {
                    b.HasOne("E_Commerce.DAL.Cart", "Cart")
                        .WithOne("Customer")
                        .HasForeignKey("E_Commerce.DAL.Customer", "CartID");

                    b.HasOne("E_Commerce.DAL.WishList", "WishList")
                        .WithOne("Customer")
                        .HasForeignKey("E_Commerce.DAL.Customer", "WishListID");

                    b.Navigation("Cart");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("E_Commerce.DAL.Cart", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.DAL.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("E_Commerce.DAL.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("E_Commerce.DAL.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("Product_Color_Size_Quantity");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("E_Commerce.DAL.WishList", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
